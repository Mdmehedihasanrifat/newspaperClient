DetailsNews.tsx
// Delete a comment
  // const handleDelete = async (commentId: number) => {
  //   const token = localStorage.getItem("token");

  //   // Show confirmation popup
  //   Swal.fire({
  //     title: "Are you sure?",
  //     text: "You won't be able to revert this!",
  //     icon: "warning",
  //     showCancelButton: true,
  //     confirmButtonColor: "#3085d6",
  //     cancelButtonColor: "#d33",
  //     confirmButtonText: "Yes, delete it!"
  //   }).then((result) => {
  //     if (result.isConfirmed) {
  //       Swal.fire({
  //         title: "Deleted!",
  //         text: "Your file has been deleted.",
  //         icon: "success"
  //       });
  //     }
  //   });
  //   const confirmDelete = window.confirm(
  //     "Are you sure you want to delete this comment?"
  //   );

  //   if (!confirmDelete) {
  //     return; // If the user cancels, do nothing
  //   }

  //   try {
  //     const response = await fetch(
  //       `http://localhost:3000/api/news/${detailsNews.id}/comments/${commentId}`,
  //       {
  //         method: "DELETE",
  //         headers: {
  //           Authorization: `${token}`, // Ensure correct Bearer format
  //         },
  //       }
  //     );

  //     if (response.ok) {
       
  //       setAllComment((prev) => prev.filter((cmt) => cmt.id !== commentId));
  //       setSuccessMessage("deleted successfully!");
  //     } else {
  //       const errorText = await response.text();
  //       setError(`Error deleting comment: ${errorText}`);
  //     }
  //   } catch (error) {
  //     setError(`Error deleting comment: ${error}`);
  //   }
  // };


//DetailsNews.tsx interface

interface Author {
  id: number;
  firstName: string;
  profile?: string;
  email?: string;
}

interface Category {
  id: number;
  name: string;
}

interface NewsDetails {
  id: number;
  headline: string;
  details: string;
  image: string;
  author: Author;
  categories: Category[];
}

interface Comment {
  id: number;
  text: string;
  createdAt: string;
  user: Author;
}
import React, { useContext, useEffect, useState } from "react";
import { useLoaderData, useNavigate, useParams } from "react-router-dom";
import CommentButton from "../Buttons/CommentButton"; // Assuming this is correctly implemented elsewhere
import { FaEdit, FaTrashAlt } from "react-icons/fa";
import Allcomment from "../Comment/Allcomment";
import userContext from "../../context/UserContext";
import Swal from "sweetalert2";
import {NewsDetails,Comment } from "../../utils/interface";


const DetailsNews = () => {
  const detailsNews = useLoaderData() as NewsDetails;
  const { id } = useParams();
  const [allComment, setAllComment] = useState<Comment[]>([]);
  const [isModalOpen, setModalOpen] = useState(false);
  const [comment, setComment] = useState("");
  const [editingCommentId, setEditingCommentId] = useState<number | null>(null);
  const [isSubmitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const context = useContext(userContext);
  const { user } = context ;
  const navigate = useNavigate();
  let localUser = localStorage.getItem("user");
  localUser = JSON.parse(localUser);

  // Fetch comments when the component mounts
  useEffect(() => {
    if (id) {
      fetch(`http://localhost:3000/api/news/${id}/comments`)
        .then((res) => res.json())
        .then((data) => setAllComment(data.comments))
        .catch((err) => {
          console.error("Fetch error:", err);
          setAllComment([]); // Set to empty array in case of fetch error
        });
    }
  }, [id]);

  // Open modal for adding or editing comments
  const handleOpenModal = (commentToEdit?: Comment) => {
    if (user?.id) {
      // If the user is logged in, open the modal
      setComment(commentToEdit?.text || "");
      setEditingCommentId(commentToEdit?.id || null);
      setModalOpen(true);
      setError(null);
      setSuccessMessage(null);
    } else {
      // If user is not logged in, navigate to login
      alert("guest user can't comment ,login first");
      navigate("/login");
    }
  };

  const handleCloseModal = () => {
    setModalOpen(false);
    setEditingCommentId(null);
  };

  const handleCommentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setComment(e.target.value);
  };

  // Add or update a comment
  const handleCommentSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const newsId = detailsNews.id;
    const commentData = { comment };
    const token = localStorage.getItem("token");

    setSubmitting(true);
    setError(null);
    setSuccessMessage(null);

    try {
      let response;
      if (editingCommentId !== null) {
        // Update existing comment
        response = await fetch(
          `http://localhost:3000/api/news/${newsId}/comments/${editingCommentId}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              Authorization: `${token}`,
            },
            body: JSON.stringify(commentData),
          }
        );
      } else {
        // Add new comment
        response = await fetch(
          `http://localhost:3000/api/news/${newsId}/comments`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `${token}`,
            },
            body: JSON.stringify(commentData),
          }
        );
      }

      if (response.ok) {
        const result = await response.json();
        if (editingCommentId !== null) {
          // Update the existing comment in state
          setAllComment((prev) =>
            prev.map((cmt) =>
              cmt.id === editingCommentId ? result.comment : cmt
            )
          );
          Swal.fire({
            title: "Good job!",
            text: "Your comment updated successfully!",
            icon: "success"
          });
        } else {
          // Add new comment to state
          setAllComment((prev) => [...prev, result.comment]);
          Swal.fire({
            title: "Good job!",
            text: "Your comment created successfully!",
            icon: "success"
          });
        }
        setComment("");
        setTimeout(() => {
          handleCloseModal();
        }, 1500);
      } else {
        const errorText = await response.text();
        setError(`Error submitting comment: ${errorText}`);
      }
    } catch (error) {
      setError(`Error submitting comment: ${error}`);
    } finally {
      setSubmitting(false);
    }
  };

  // handleDeleteNews
  const handleDeleteNews = async (id: number) => {
    const token = localStorage.getItem("token");

    // Show confirmation popup
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this comment?"
    );

    if (!confirmDelete) {
      return; // If the user cancels, do nothing
    }

    try {
      const response = await fetch(`http://localhost:3000/api/news/${id}`, {
        method: "DELETE",
        headers: {
          Authorization: `${token}`, // Ensure correct Bearer format
        },
      });

      if (response.ok) {
        setSuccessMessage("deleted successfully!");
        navigate("/");
      } else {
        const errorText = await response.text();
        setError(`Error deleting news: ${errorText}`);
      }
    } catch (error) {
      setError(`Error deleting news: ${error}`);
    }
  };

  
  const handleDelete = async (commentId: number) => {
    const token = localStorage.getItem("token");
  
    // Show confirmation popup using SweetAlert
    const result = await Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!"
    });
  
    // If the user cancels, return early
    if (!result.isConfirmed) {
      return;
    }
  
    try {
      const response = await fetch(
        `http://localhost:3000/api/news/${detailsNews.id}/comments/${commentId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `${token}`, // Ensure correct Bearer format
          },
        }
      );
  
      if (response.ok) {
        // If delete is successful, update the state and show success message
        setAllComment((prev) => prev.filter((cmt) => cmt.id !== commentId));
        
        // Show success message
        Swal.fire({
          title: "Deleted!",
          text: "Your comment has been deleted.",
          icon: "success"
        });
  
        setSuccessMessage("Deleted successfully!");
      } else {
        // Handle error case if the response is not ok
        const errorText = await response.text();
        setError(`Error deleting comment: ${errorText}`);
      }
    } catch (error) {
      // Catch any other errors and display them
      setError(`Error deleting comment: ${error}`);
    }
  };
  


  return (
    <div className="w-full">
      <div className="grid grid-cols-12 gap-2 ">
        <div className="col-span-2 mt-32 px-4">
          <div className="bg-gray-100 p-4 mb-4 border border-gray-300 rounded shadow">
            <h3 className="font-bold text-lg">
              Author:{detailsNews.author.name}
            </h3>

            <h3 className="font-bold text-lg">
              {new Date(detailsNews.createdAt).toLocaleDateString()}
            </h3>
          </div>
        </div>

        <div className="col-span-8">
          <div className="text-center my-6 w-full">
            <h2 className="text-2xl font-sans tracking-tight leading-10 font-bold text-gray-900 sm:text-3xl sm:leading-none md:text-4xl">
              {detailsNews.headline}
            </h2>
          </div>
          <div
            className="4/5 h-96 bg-cover bg-center align-middle  my-6 rounded"
            style={{ backgroundImage: `url(${detailsNews.image})` }}
          />

          <div className="w-full px-2 lg:px-2 text-left">
            <p className="mt-3 mb-5 text-base text-black-500 sm:mt-5 sm:text-lg sm:max-w-full md:mt-5 md:text-xl lg:mx-0 font-serif">
              {detailsNews.details}
            </p>
            <div />

            <div className="w-full flex gap-2">
              <CommentButton
                onClick={() => {
                  handleOpenModal();
                }}
              />

              {localUser?.id == detailsNews.author.id ? (
                <>
                  <button
                    onClick={() => handleDeleteNews(detailsNews.id)}
                    className="flex items-center gap-2 text-white bg-red-500 hover:bg-red-600 py-2 px-4 rounded"
                  >
                    <FaTrashAlt />
                    News Delete
                  </button>

                  <button className="flex items-center gap-2 text-white bg-blue-500 hover:bg-blue-600 py-2 px-4 rounded">
                    <FaEdit />
                    News Edit
                  </button>
                </>
              ) : (
                <></>
              )}
            </div>
          </div>
        </div>

        <div className="col-span-2 mt-14 mx-6">
          <h2>Related News</h2>
        </div>
      </div>

      {isModalOpen && (
        <dialog id="comment-modal" open className="modal">
          <div className="modal-box">
            <h3 className="font-bold text-lg">
              {editingCommentId ? "Edit Comment" : "Add a Comment"}
            </h3>
            <form onSubmit={handleCommentSubmit} className="mt-4">
              <textarea
                value={comment}
                onChange={handleCommentChange}
                className="textarea textarea-bordered w-full h-32"
                placeholder="Write your comment here..."
                required
                disabled={isSubmitting}
              />
              <div className="modal-action mt-4">
                <button
                  type="submit"
                  className="btn btn-primary"
                  disabled={isSubmitting}
                >
                  {isSubmitting
                    ? "Submitting..."
                    : editingCommentId
                    ? "Update"
                    : "Submit"}
                </button>
                <button
                  type="button"
                  onClick={handleCloseModal}
                  className="btn"
                >
                  Close
                </button>
              </div>
              {error && <p className="text-red-500 mt-4">{error}</p>}
              {successMessage && (
                <p className="text-green-500 mt-4">{successMessage}</p>
              )}
            </form>
          </div>
        </dialog>
      )}

      <div className="comments-section mt-8 mx-56  py-7 lg:px-2">
        <h3 className="text-xl font-semibold">Comments</h3>
        {allComment.length === 0 ? (
          <p className="mt-4">No comments yet.</p>
        ) : (
          <Allcomment
            allComment={allComment}
            handleOpenModal={handleOpenModal}
            handleDelete={handleDelete}
          ></Allcomment>
        )}
      </div>
    </div>
  );
};

export default DetailsNews;


  const handleFetch = async (url: string, method: string, bodyData?: any) => {
    const options: RequestInit = {
      method,
      headers: {
        "Content-Type": "application/json",
        Authorization: `${token}`,
      },
    };
    if (bodyData) {
      options.body = JSON.stringify(bodyData);
    }
    const response = await fetch(url, options);
    return response;
  };



//Navbar
src/components/Navbar/Navbar.tsx


import { useContext, useEffect, useState, ChangeEvent } from "react";
import { FaSearch } from "react-icons/fa";
import userContext from "../../context/UserContext";
import { Link, useNavigate } from "react-router-dom";
import logo from "../../assets/download (1).png";
import { TiWeatherPartlySunny } from "react-icons/ti";

interface User {
  id: number;
  name: string;
  email: string;
}

interface UserContextType {
  user: User | null;
  setUser: (user: User | null) => void;
}

interface SearchResult {
  id: number;
  title: string;
}

const Navbar = () => {
  const context = useContext(userContext);
  const { user, setUser } = context as UserContextType;
  const [showSearch, setShowSearch] = useState(false); // State to toggle the search bar
  const [searchQuery, setSearchQuery] = useState(""); // State to manage search input
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]); // State to store search results

  useEffect(() => {
    const localUser = localStorage.getItem("user");
    if (localUser) {
      setUser(JSON.parse(localUser));
    } else {
      setUser(null);
    }
  }, [setUser]);

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    setUser(null);
  };

  const navigate = useNavigate();

  const getCurrentDate = () => {
    const date = new Date();
    return date.toDateString(); // Returns a formatted string like 'Mon Sep 18 2024'
  };

  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
  };

  const performSearch = async () => {
    if (searchQuery.trim() === "") return;

    try {
      const response = await fetch(
        `http://localhost:3000/api/news/news/search?query=${searchQuery}`
      );
      const data = await response.json();
      setSearchResults(data.news || []);
    } catch (error) {
      console.error("Error searching news:", error);
    }
  };

  const handleNews = () => {
    console.log(user?.id);
    navigate(`news/${user?.id}/profile`);
  };

  useEffect(() => {
    if (searchQuery.length > 2) {
      // Perform search after user types at least 3 characters
      performSearch();
    } else {
      setSearchResults([]); // Clear results if search query is too short
    }
  }, [searchQuery]);

  return (
    <div className="navbar-container">
      {/* First Section: Date, Logo, Hamburger, and User */}
      <div className="navbar bg-base-100">
        <div className="navbar-start">
          {/* Hamburger Menu */}
          <div className="dropdown">
            <div
              tabIndex={0}
              role="button"
              className="btn btn-ghost btn-circle"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M4 6h16M4 12h16M4 18h7"
                />
              </svg>
            </div>
            <ul
              tabIndex={0}
              className="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow"
            >
              <li>
                <Link to="/">Home</Link>
              </li>
              <li>
                <Link to="/newscreate">News Create</Link>
              </li>
              <li>
                <Link to="/login">Login</Link>
              </li>
            </ul>
          </div>
          {/* Current Date */}
          <div className="ml-4 flex items-center space-x-2">
            <TiWeatherPartlySunny />
            <p>{getCurrentDate()}</p>
          </div>
        </div>
        <div className="navbar-center">
          {/* Logo */}
          <img src={logo} className="h-24 w-24" alt="Logo" />
        </div>
        <div className="navbar-end">
          <div className="dropdown dropdown-end">
            <div
              tabIndex={0}
              role="button"
              className="btn btn-ghost btn-square mx-2"
            >
              <div className="w-12">
                {user ? <h2>{user.name}</h2> : <h2>Guest</h2>}
              </div>
            </div>
            <ul
              tabIndex={0}
              className="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow"
            >
              <li>
                {user ? (
                  <button
                    onClick={handleNews}
                    className="btn btn-ghost w-full text-left"
                  >
                    CreatedNews
                  </button>
                ) : (
                  <></>
                )}
              </li>

              <li className="text-red-700">
                {user ? (
                  <button
                    onClick={handleLogout}
                    className=" bg-red-500 text-white btn btn-ghost w-full text-left"
                  >
                    Logout
                  </button>
                ) : (
                  <button
                    onClick={() => navigate("/login")}
                    className="btn btn-ghost w-full text-left"
                  >
                    Login
                  </button>
                )}
              </li>
            </ul>
          </div>
        </div>
      </div>

      {/* Second Section: Links and Search Icon */}
      <div className="navbar bg-base-100 w-full font-extrabold -mt-8">
        <div className="flex justify-between items-center w-full">
          {/* Center Links */}
          <div className="flex-grow text-center ">
            <Link to="/" className="text-md mx-4 hover:text-orange-600">
              Home
            </Link>
            <Link to="/sports" className="text-md mx-4 hover:text-orange-600">
              Sports
            </Link>
            <Link to="/politics" className="text-md mx-4 hover:text-orange-600">
              Politics
            </Link>
          </div>

          {/* Extreme Right-Aligned Search Icon */}
          <div className="flex-shrink-0">
            <button
              className="btn btn-ghost btn-circle"
              onClick={() => setShowSearch(!showSearch)}
            >
              <FaSearch />
            </button>
          </div>
        </div>
      </div>

      {/* Third Section: Search Bar and Results */}
      {showSearch && (
        <div className="navbar bg-base-100 p-4 border-t border-gray-200">
          <div className="w-full flex flex-col items-center">
            <input
              type="text"
              placeholder="Search"
              className="input input-bordered w-full max-w-lg mb-4"
              autoFocus
              value={searchQuery}
              onChange={handleSearchChange}
            />
            {/* Display search results */}
            {searchResults?.length > 0 && (
              <div className="w-full max-w-lg mt-4">
                <ul>
                  {searchResults.map((result) => (
                    <li key={result.id} className="mb-2">
                      <Link
                        to={`/news/${result.id}`}
                        className="text-blue-500 hover:underline"
                      >
                        {result.title}
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            {searchQuery?.length > 2 && searchResults.length === 0 && (
              <p>No results found</p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Navbar;

   <div className="grid grid-cols-12 gap-2">
        <div className="col-span-2 mt-32 px-4">
          <div className="bg-gray-100 p-4 mb-4 border border-gray-300 rounded shadow">
            <h3 className="font-bold text-lg">Author: {detailsNews.author.name}</h3>
            <h3 className="font-bold text-lg">{formattedDate}</h3>
          </div>
        </div>

        <div className="col-span-8">
          <div className="text-center my-6 w-full">
            <h2 className="text-2xl font-sans tracking-tight leading-10 font-bold text-gray-900 sm:text-3xl sm:leading-none md:text-4xl">
              {detailsNews.headline}
            </h2>
          </div>
          <div className="h-96 bg-cover bg-center align-middle my-6 rounded" style={{ backgroundImage: `url(${detailsNews.image})` }} />

          <div className="w-full px-2 lg:px-2 text-left">
            <p className="mt-3 mb-5 text-base text-black-500 sm:mt-5 sm:text-lg sm:max-w-full md:mt-5 md:text-xl lg:mx-0 font-serif">
              {detailsNews.details}
            </p>

            <div className="w-full flex gap-2">
              <CommentButton onClick={() => handleOpenModal()} />

              {user?.id === detailsNews.author.id && (
                <>
                  <button
                    onClick={handleDeleteNews}
                    className="flex items-center gap-2 text-white bg-red-500 hover:bg-red-600 py-2 px-4 rounded"
                  >
                    <FaTrashAlt />
                    Delete News
                  </button>
                  <button
                    onClick={() => setEditModalOpen(true)}
                    className="flex items-center gap-2 text-white bg-blue-500 hover:bg-blue-600 py-2 px-4 rounded"
                  >
                    <FaEdit />
                    Edit News
                  </button>
                </>
              )}
            </div>
          </div>
        </div>

        <div className="col-span-2 mt-14 mx-6">
          <h2>Related News</h2>
        </div>
      </div>
